function [B,I] = im2bmode(filename,siz,probe)

%IM2BMODE   Generate a B-mode image from an image (function for Adrian)
%   B = IM2BMODE(FILENAME) reads an image from the file specified by
%   FILENAME and simulates a B-mode image as generated by a linear array.
%   A series of focused waves is simulated.
%
%   By default, the linear array contains 192 elements and its center
%   frequency is 7.5 MHz (L12-3v).
%
%   B is an 8-bit grayscale image of the same size as I. To modify the size
%   of the images use [...] = IM2BMODE(FILENAME,SIZ).
%
%   To simulate an 128-element 7.6-MHz linear array (L11-5v), use the
%   following syntax:
%   ... = IM2BMODE(FILENAME,SIZ,PROBE) or ... = IM2BMODE(FILENAME,[],PROBE)
%  with PROBE = 128 or 'L11-5v'. For the 192-element array (default), use
%  PROBE = 192 or 'L12-3v'.
%  
%  [B,I] = IM2BMODE(...) also returns the image from FILENAME. The size of
%  the image I is SIZ (thus resized if necessary).
%
%   Example:
%   -------
%   [B,I] = im2bmode('HappyPig.png');
%   tiledlayout(1,3,'TileSpacing','none')
%   nexttile
%   imshow(I,'InitialMagnification','fit')
%   title('Grayscale image')
%   nexttile
%   imshow(B,'InitialMagnification','fit')
%   title('B-mode image')
%   nexttile
%   imshow(imlincomb(3,B,1,I,'uint16'),[],'InitialMagnification','fit')
%   title('Combined image')
%
%
%   See also SIMUS, BMODE.
%
%   -- Damien Garcia -- 2022/03
%   website: <a
%   href="matlab:web('https://www.biomecardio.com')">www.BiomeCardio.com</a>


%-- Open the image in FILENAME and store its gray values in I
I = imread(filename);
I = im2gray(I);
if nargin==1 || isempty(siz)
    siz = size(I);
end

%-- Check SIZ
assert(isvector(siz) & numel(siz)==2 & isequal(siz,round(siz)),...
    'SIZ must specify the size of the output image.')

%-- Ultrasound probe
if nargin<3
    probe = 'L12-3v';
else
    if isequal(probe,192)
        probe = 'L12-3v';
    elseif isequal(probe,128)
        probe = 'L11-5v';
    end
end
assert(ismember(lower(probe),{'l11-5v','l12-3v'}),...
    'PROBE must be 128, 192, ''L11-5v'' or ''L12-3v''')

%-- Parameters of the ultrasound probe
param = getparam(probe);
L = param.pitch*(param.Nelements-1); % width of the full aperture 

%-- Sub-apertures
% number of elements used to generate one focused beam
if param.Nelements==192, Ne = 32; else, Ne = 24; end
param.Nelements = Ne;
l = param.pitch*(Ne-1); % width of a sub-aperture
xsa = ((-L+l)/2:param.pitch:(L-l)/2); % center of the sub-apertures
Nsa = length(xsa); % number of sub-apertures

%-- Pseudorandom distribution of scatterers. The mean distance between two
%   scatterers is lambda_min. Their reflectivity coefficients are
%   calculated from the image I.
meandist = 1540/(param.fc*(1+param.bandwidth/200));
imwidth = (L-l)*siz(2)/(siz(2)-1); % image width
imheight = imwidth*siz(1)/siz(2); % image height
[xs,~,zs,RC] = genscat([imwidth imheight],meandist,I,60);

%-- Transmit delays for a focused trasnmit
xf = 0; zf = max(zs,[],'all')/2;
txdel = txdelay(xf,zf,param);
% txdel = zeros(1,Ne);

%-- Simulations of the RF signals with SIMUS
RF = cell(Nsa,1); % this cell will contain the RF series
param.fs = 4*param.fc; % sampling frequency in Hz
%
option = [];
option.WaitBar = false; % remove the wait bar of SIMUS
% option.ElementSplitting = 1; % to make things faster
%
h = waitbar(0,'');
for k = 1:Nsa
    %--- Scatterers in front of the sub-apertures
    idx = abs(xs-xsa(k))<(l/2);
    %---
    waitbar(k/Nsa,h,['SIMUS: RF series #' int2str(k) ' of ' int2str(Nsa)])
    RF{k} = simus(xs(idx)-xsa(k),zs(idx),RC(idx),txdel,param,option);    
end
close(h)

%-- I/Q demodulation of the RF signals
IQ = cell(Nsa,1);  % this cell will contain the I/Q series
for k = 1:Nsa
    IQ{k} = rf2iq(RF{k},param.fs,param.fc);
end
n = min(cellfun(@(x) size(x,1),IQ)); % number of samples in an I/Q

%-- Coordinates of a B-mode scanline
x = zeros(siz(1),1);
dz = imheight/siz(1);
z = ((dz/2):dz:(imheight-dz/2))';

%-- DAS beamforming
IQb = zeros([siz(2) Nsa]);  % this array will contain the I/Q image
%
h = waitbar(0,'beamforming...');
param.fnumber = [];
M = dasmtx(1i*[n Ne],x,z,txdel,param);
for k = 1:Nsa
    tmp = IQ{k}(1:n,:);
    waitbar(k/Nsa,h)
    IQb(:,k) = M*tmp(:);    
end
close(h)

%-- TGC
[xs,~,zs,RC] = genscat([l imheight],meandist,[],10);
RFtgc = simus(xs,zs,RC,txdel,param,option);
IQtgc = rf2iq(RFtgc,param.fs,param.fc);
IQtgc = IQtgc(1:n,:);
IQbtgc = M*IQtgc(:);
TGC = smoothn(abs(IQbtgc),1e6);
TGC = TGC/max(TGC);

%-- Compound B-mode image
DR = 60; % dynamic range (in dB)
B = bmode(IQb./TGC,DR);

%-- Resize the images
B = resize(B,siz);
if nargin>1 && nargout>1
    I = resize(I,siz);
end

%{
%-- Display the original image
figure(101)
imshow(I,'InitialMagnification','fit')
title('The initial image')

%-- Display the B-mode image
figure(102)
imshow(B,'InitialMagnification','fit')
title('A simulated B-mode image')
%}


